## 悬浮按钮
1.FloatingActionButton

```xml
<android.support.design.widget.FloatingActionButton
    android:id="@+id/fab"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_gravity="bottom|end"
    android:layout_margin="16dp"
    android:src="@drawable/ic_done"
    app:elevation="8dp"/>
```

layout_gravity : end 表示和文字方向相反，例如中文是从左到右显示的， 则该按钮在最右边，反之，在左边

evelation属性表示投影的范围，范围越大，投影效果越淡，一般可以省略
layout_anchor="@id/idName" 表示将悬浮按钮放置在指定布局上
layout_anchorGravity="bottom|end" 表示相对于指定布局的位置

2. 在主活动中获取按钮，并设置点击事件

## 可交互提示 Snackbar

```java
Snackbar.make(v,"Data deleted", Snackbar.LENGTH_LONG)
                        .setAction("撤销", new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                Toast.makeText(MainActivity.this,"Data Restored",Toast.LENGTH_SHORT).show();

                            }
                        }).show();
```

setAction(String str, callback)  第一个参数是在弹出的Snackbar上的动作按钮文字，第二个参数为点击按钮的响应事件


## CoordinatorLayout
加强版的FrameLayout,用来代替FrameLayout

会自动监听布局内的所有控件，例如当Snackbar 从下方弹出时，可能会覆盖FloatingActionButton， 但是如果外界布局是 CoordinatorLayout，就会自动将FloatingActionButton上移，显示Snackbar

```xml
    <android.support.design.widget.CoordinatorLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">
```
